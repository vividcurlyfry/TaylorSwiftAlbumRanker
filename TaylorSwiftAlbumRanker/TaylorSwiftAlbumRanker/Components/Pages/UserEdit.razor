@page "/edit-user"
@page "/edit-user/{id:int}"
@inject IUsersService UserService
@inject IPermissionsService PermissionsService
@inject IRolePermissionsService RolePermissionService
@inject IRolesService RoleService
@inject IUserRolesService UserRolesService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if(Id == null)
{
    <h3>Add User</h3>
}
else @if (@user != null)
{
    <h3>Edit @user.Username</h3>
}


<EditForm Model="@user" OnSubmit="HandleSubmit" FormName="editUser">
    <InputText @bind-Value="@user!.Username"/>
    <div></div>
    <button Id="user.Id" @onclick="EditRoles" type="button" class="btn btn-primary">Edit Roles</button>
    <button type="submit" class="btn btn-primary">Submit</button>
    @if(Id != null)
    {
        <DeleteUserButton Id="user.Id" />
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    [SupplyParameterFromForm]
    User user { get; set; } = new User { Username = string.Empty, RoleName = string.Empty };

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            user = await UserService.GetUserById((int)Id);
            var role_name = user.RoleName;
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await UserService.AddUser(user);
        }
        else
        {
            await UserService.UpdateUser(user);
        }
    }

    void EditRoles()
    {
        NavigationManager.NavigateTo("/edit-roles/"+(user.Id.ToString()));
    }
}
