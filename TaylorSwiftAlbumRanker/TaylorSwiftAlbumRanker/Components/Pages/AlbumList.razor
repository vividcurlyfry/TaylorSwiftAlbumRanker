@page "/"
@page "/albums"
@inject IAlbumsService AlbumsService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<h3>Album List</h3>

@if(albums == null)
{
    <span>Loading...</span>
}
else if (albums.Count == 0)
{
    <span>No albums found.</span>
    <div></div>
}
else
{
        @foreach(var album in albums)
        {
            <div style="padding-bottom: 1rem;">
                <div class="card" style="width: 18rem;">
                    <img class="card-img-top" src="@album.PictureHyperlink"alt="@album.AlbumName">
                    <div class="card-body">
                        <h5 class="card-title">@album.AlbumName</h5>
                    <p class="card-text">Average Ranking: @GetAlbumRank(album)</p>
                    </div>
                </div>
            </div>
        <div style="padding-bottom: 2rem;">
            @if (!album.AlbumName.Contains("Version"))
            {
                <button Id="album.Id" @onclick="() => EditAlbum(album.Id)" class="btn btn-primary">Update to Taylor's Version</button>
            }
            <button Id="album.Id" @onclick="() => RankAlbum(album.Id)" class="btn btn-primary">Rank Album</button>
        </div>
        }       
}

@code {
    List<Album>? albums = new List<Album>();

    protected override async Task OnInitializedAsync()
    {   
        albums = await  AlbumsService.GetAllAlbums();
    }

    void EditAlbum(int id)
    {
        NavigationManager.NavigateTo($"/edit-album/{id}");
    }

    void RankAlbum(int id)
    {
        NavigationManager.NavigateTo($"/rank-album/{id}");
    }

    string GetAlbumRank(Album album)
    {   try
        {
            return (album.Ranking / album.NumRanking).ToString();
        }
        catch
        {
            if (album.NumRanking == 0)
                return "Not Ranked";

            else
            {
                return "0";
            }

        }
    }
}
